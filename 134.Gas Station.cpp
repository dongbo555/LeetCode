/*思路：

环形路径并且需要走完一整圈，则有：

1)，若全部加油站的汽油 小于 路径总消耗油量，则不可能走完全程。

2)，反之，若全部加油站的汽油 大于等于 路径总消耗油量，那么必然有至少存在一个站可以出发走完全程。

以上是我能想到的，至于如何环形路径中找到 2) 中的加油站，则没有什么思路。

在网上看到一个讲解，才明白，而解决方案的关键就是题目的限制条件“本题目只有唯一一个解”。

由于只有唯一解 i ，则以下性质：

性质1. 任何 j ( 0<= j < i) 都不可能到达 i 。

性质2. 任何 k (i <= i < n) ，i 都可以到达。

所以，从左往右扫，当遇到第一个i, 满足 sum[i,j] (i <= j < n) 均大于等于0，那么 i 便是题目的解。

若对每一个元素都检查 sum[i,j] ，那么耗时为 O(n*n) 。这里借助 性质1 优化查找。

假设 sum[i1, j] (i1<= j < t2) 都大于等于 0 ，当 j = t2 时，sum[i1, j] 小于 0 ，那么 i1 不是解，根据性质1，i1~ t2 都不是解。可以从 t2+1 开始继续扫。
*/

int canCompleteCircuit(vector<int> &gas, vector<int> &cost) {
    int n = gas.size();
    int j = -1;
    int sum = 0, total = 0;
    for (int i = 0; i < n; i++) {
        sum += gas[i] - cost[i];
        total += gas[i] - cost[i];
        if (sum < 0) {
            sum = 0;
            j = i;
        }
    }
    if (total < 0)return -1;
    else return j + 1;
}
